name: elasticsearch-ci

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq & curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Kernel setting for ES
        run: sudo sysctl -w vm.max_map_count=262144

      # Ensure the mounted backup dir is writable by the ES user (uid 1000, gid 0)
      - name: Prepare snapshot directory
        run: |
          sudo mkdir -p es-backup
          sudo chown -R 1000:0 es-backup
          sudo chmod -R 775 es-backup

      # Small runtime override: heap + ulimits for ES 6.x
      - name: Create docker-compose.override.yaml
        run: |
          cat > docker-compose.override.yaml <<'YAML'
          services:
            es:
              environment:
                - ES_JAVA_OPTS=-Xms512m -Xmx512m
              ulimits:
                memlock:
                  soft: -1
                  hard: -1
                nofile:
                  soft: 65536
                  hard: 65536
          YAML

      - name: Start Elasticsearch
        run: |
          docker compose up -d
          docker compose ps

      - name: Wait for Elasticsearch HTTP
        env:
          ES_URL: http://localhost:19200
        run: |
          set -euo pipefail
          for i in {1..120}; do
            if curl -s "$ES_URL/_cluster/health" | jq -e '.status=="yellow" or .status=="green"' >/dev/null; then
              echo "Elasticsearch is ready"
              curl -s "$ES_URL" | jq .
              exit 0
            fi
            echo "Waiting for ES ($i/120)..."
            sleep 2
          done
          echo "ES not ready in time"; docker compose logs es || true; exit 1

      - name: Make script executable
        run: chmod +x ./showcase.sh

      # ==== Do what you did locally ====

      - name: Initialize snapshot repository
        run: ./showcase.sh snapshot_init

      - name: Seed index with baseline data
        run: ./showcase.sh init

      - name: Take snapshot (block until done)
        run: ./showcase.sh snapshot_take

      - name: Show snapshot details via API
        run: |
          echo "== All snapshots in repo =="
          curl -s http://localhost:19200/_snapshot/my_backup/_all | jq .
          echo "== Latest snapshot only =="
          LATEST=$(curl -s http://localhost:19200/_snapshot/my_backup/_all | jq -r '.snapshots[-1].snapshot')
          curl -s "http://localhost:19200/_snapshot/my_backup/$LATEST" | jq .

      - name: Show snapshot files on disk
        run: |
          echo "== es-backup contents =="
          ls -la es-backup || true
          META_FILE=$(ls -t es-backup/meta-*.dat 2>/dev/null | head -n 1 || true)
          if [ -n "$META_FILE" ]; then
            echo "== Preview of $META_FILE =="
            sed -n '1,200p' "$META_FILE"
          else
            echo "No meta-*.dat found."
          fi

      - name: Upload snapshot artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: elasticsearch-snapshots
          path: es-backup/
          if-no-files-found: warn
          retention-days: 14

      # ==== Round-trip: modify -> restore -> verify ====

      - name: Modify doc 1 (simulate bad change)
        run: |
          ./showcase.sh modify 1
          VAL=$(curl -s http://localhost:19200/test-index/_doc/1 | jq -r '._source.value')
          echo "Modified value: $VAL"
          test "$VAL" = "999999"

      - name: Restore latest snapshot
        run: ./showcase.sh snapshot_restore

      - name: Verify data restored from snapshot
        run: |
          for i in {1..30}; do
            VAL=$(curl -s http://localhost:19200/test-index/_doc/1 | jq -r '._source.value')
            echo "Attempt $i: Restored value: $VAL"
            if [ "$VAL" = "1" ]; then
              echo "Restored correctly"; exit 0
            fi
            sleep 1
          done
          echo "Value never restored correctly"
          docker compose logs es || true
          exit 1

      - name: Teardown
        if: always()
        run: |
          docker compose logs es || true
          docker compose down -v

