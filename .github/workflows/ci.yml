name: elasticsearch-ci

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq & curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # ES 6.x needs this kernel setting
      - name: Set vm.max_map_count
        run: sudo sysctl -w vm.max_map_count=262144

      # Ensure snapshot dir perms for ES container user (uid 1000, gid 0)
      - name: Prepare snapshot directory with correct ownership
        run: |
          sudo mkdir -p es-backup
          sudo chown -R 1000:0 es-backup
          sudo chmod -R 775 es-backup

      # Add runtime compose override for heap + ulimits
      - name: Create docker-compose.override.yaml
        run: |
          cat > docker-compose.override.yaml <<'YAML'
          services:
            es:
              environment:
                - ES_JAVA_OPTS=-Xms512m -Xmx512m
              ulimits:
                memlock:
                  soft: -1
                  hard: -1
                nofile:
                  soft: 65536
                  hard: 65536
          YAML
          cat docker-compose.override.yaml

      - name: Start Elasticsearch via Docker Compose
        run: |
          docker compose up -d
          docker ps

      - name: Verify container is running (compose-aware)
        run: |
          # Wait up to ~30s for the "es" service to be in running state
          for i in {1..30}; do
            RUNNING=$(docker compose ps --services --status=running | grep -E '^es$' || true)
            if [ -n "$RUNNING" ]; then
              echo "ES service is running."
              docker compose ps
              exit 0
            fi
            echo "Waiting for ES service to be running ($i/30)..."
            docker compose ps
            sleep 1
          done
          echo "ES service failed to reach running state."
          docker compose logs es || true
          exit 1

      - name: Wait for Elasticsearch HTTP to be ready
        env:
          ES_URL: http://localhost:19200
        run: |
          set -euo pipefail
          for i in {1..120}; do
            if curl -s "$ES_URL/_cluster/health" | jq -e '.status=="yellow" or .status=="green"' >/dev/null; then
              echo "Elasticsearch is up"
              curl -s "$ES_URL" | jq .
              exit 0
            fi
            echo "Waiting for ES HTTP ($i/120)..."
            sleep 2
          done
          echo "Elasticsearch did not become ready in time"
          docker compose logs es || true
          exit 1

      - name: Make script executable
        run: chmod +x ./showcase.sh

      - name: Initialize snapshot repository
        run: ./showcase.sh snapshot_init

      - name: Seed index with baseline data
        run: ./showcase.sh init

      - name: Verify baseline value for doc 1
        run: |
          VAL=$(curl -s http://localhost:19200/test-index/_doc/1 | jq -r '._source.value')
          echo "Initial value: $VAL"
          test "$VAL" = "1"

      - name: Take snapshot
        run: ./showcase.sh snapshot_take

      - name: Modify doc 1 (simulate bad change)
        run: |
          ./showcase.sh modify 1
          VAL=$(curl -s http://localhost:19200/test-index/_doc/1 | jq -r '._source.value')
          echo "Modified value: $VAL"
          test "$VAL" = "999999"

      - name: Restore latest snapshot
        run: ./showcase.sh snapshot_restore

      - name: Verify data restored from snapshot
        run: |
          for i in {1..30}; do
            VAL=$(curl -s http://localhost:19200/test-index/_doc/1 | jq -r '._source.value')
            echo "Attempt $i: Restored value: $VAL"
            if [ "$VAL" = "1" ]; then
              echo "Restored correctly"
              exit 0
            fi
            sleep 1
          done
          echo "Value was never restored correctly"
          docker compose logs es || true
          exit 1

      - name: List snapshots (for logs)
        run: ./showcase.sh snapshot_list

      - name: Upload snapshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: elasticsearch-snapshots
          path: es-backup/
          if-no-files-found: warn

      - name: Teardown
        if: always()
        run: |
          docker compose logs es || true
          docker compose down -v

