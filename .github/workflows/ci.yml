name: elasticsearch-ci (self-hosted on Mac)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  e2e:
    # Run on your Mac's self-hosted runner
    runs-on: [self-hosted, macOS, X64]
    timeout-minutes: 35

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq & curl present (Homebrew)
        run: |
          which jq || (brew update && brew install jq)
          which curl || echo "curl is built-in on macOS"

      # Make sure the local host folder exists and is writable by the container
      - name: Prepare local backup folder (bind mount target)
        run: |
          mkdir -p es-backup
          chmod -R 777 es-backup

      # Optional override for ES heap/ulimits. Docker Desktop ignores host sysctl,
      # but ES 6.x usually works fine on Mac with single-node.
      - name: Create docker-compose.override.yaml
        run: |
          cat > docker-compose.override.yaml <<'YAML'
          services:
            es:
              environment:
                - ES_JAVA_OPTS=-Xms512m -Xmx512m
              ulimits:
                memlock:
                  soft: -1
                  hard: -1
                nofile:
                  soft: 65536
                  hard: 65536
          YAML

      - name: Start Elasticsearch locally (on your Mac)
        run: |
          docker compose up -d
          docker compose ps

      - name: Wait for Elasticsearch HTTP
        env:
          ES_URL: http://localhost:19200
        run: |
          set -euo pipefail
          for i in {1..120}; do
            if curl -s "$ES_URL/_cluster/health" | jq -e '.status=="yellow" or .status=="green"' >/dev/null; then
              echo "Elasticsearch is ready"
              curl -s "$ES_URL" | jq .
              exit 0
            fi
            echo "Waiting for ES ($i/120)..."
            sleep 2
          done
          echo "ES not ready in time"; docker compose logs es || true; exit 1

      - name: Make script executable
        run: chmod +x ./showcase.sh

      # === same flow you ran manually ===
      - name: Initialize snapshot repository
        run: ./showcase.sh snapshot_init

      - name: Seed index with baseline data
        run: ./showcase.sh init

      - name: Take snapshot (waits)
        run: ./showcase.sh snapshot_take

      - name: Show snapshot details via API
        run: |
          echo "== All snapshots in repo =="
          curl -s http://localhost:19200/_snapshot/my_backup/_all | jq .
          echo "== Latest snapshot only =="
          LATEST=$(curl -s http://localhost:19200/_snapshot/my_backup/_all | jq -r '.snapshots[-1].snapshot')
          curl -s "http://localhost:19200/_snapshot/my_backup/$LATEST" | jq .

      - name: List files in your local es-backup (on this Mac)
        run: |
          echo "== es-backup contents (host) =="
          ls -la es-backup || true
          echo
          echo "== Mounts inside the container =="
          CID=$(docker compose ps -q es)
          docker exec "$CID" sh -lc 'ls -la /usr/share/elasticsearch/backup || true'

      # Round-trip: modify -> restore -> verify
      - name: Modify doc 1 (simulate bad change)
        run: |
          ./showcase.sh modify 1
          VAL=$(curl -s http://localhost:19200/test-index/_doc/1 | jq -r '._source.value')
          echo "Modified value: $VAL"
          test "$VAL" = "999999"

      - name: Restore latest snapshot
        run: ./showcase.sh snapshot_restore

      - name: Verify data restored from snapshot
        run: |
          for i in {1..30}; do
            VAL=$(curl -s http://localhost:19200/test-index/_doc/1 | jq -r '._source.value')
            echo "Attempt $i: Restored value: $VAL"
            if [ "$VAL" = "1" ]; then
              echo "Restored correctly"; exit 0
            fi
            sleep 1
          done
          echo "Value never restored correctly"
          docker compose logs es || true
          exit 1

      # Keep containers but you can change to "down -v" if you like; bind mount persists anyway.
      - name: Teardown containers (keep local backup folder)
        if: always()
        run: |
          docker compose logs es || true
          docker compose down

